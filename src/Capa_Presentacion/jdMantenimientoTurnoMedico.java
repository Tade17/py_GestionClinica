/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Capa_Presentacion;


import Capa_Negocio.clsMedico;
import Capa_Negocio.clsTurnoMedico;
import java.awt.Frame;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.time.ZoneId;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author MendozaGastulo_Tadeo
 */
public class jdMantenimientoTurnoMedico extends javax.swing.JDialog {

    private Object Time;

    public jdMantenimientoTurnoMedico() {
    }

    clsTurnoMedico objTurno = new clsTurnoMedico();
    clsMedico objMedico = new clsMedico();
    ResultSet rs = null;

    public jdMantenimientoTurnoMedico(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        DefaultListModel modeloLista = new DefaultListModel<>();
        listEspecialidades.setModel(modeloLista);
        txtCupos.setEditable(false);

        formatoParaLosSpinners();
        listarTurnoMedico();
        cargarMedicos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jdFecha = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        chkEstado = new javax.swing.JCheckBox();
        spnHoraFin = new javax.swing.JSpinner();
        spnHoraInicio = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        listEspecialidades = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        txtDniMedico = new javax.swing.JTextField();
        lblMedico = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtCupos = new javax.swing.JTextField();
        btnBusquedaAvanzadaMédico = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnModificar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnDarBaja = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTurnos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MANTENIMIENTO TURNO MEDICO");

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setText("ID Turno ");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel6.setText("Hora_Entrada");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel4.setText("Fecha");

        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel7.setText("Hora_Fin");

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/1622836_checkmark_done_explore_find_magnifier_icon.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel8.setText("Estado");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel9.setText("Medico:");

        chkEstado.setText("Inactivo");
        chkEstado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkEstadoStateChanged(evt);
            }
        });

        spnHoraFin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                spnHoraFinKeyTyped(evt);
            }
        });

        spnHoraInicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                spnHoraInicioKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                spnHoraInicioKeyTyped(evt);
            }
        });

        jScrollPane2.setViewportView(listEspecialidades);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel10.setText("Dni_Medico");

        txtDniMedico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDniMedicoKeyReleased(evt);
            }
        });

        lblMedico.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lblMedico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel11.setText("Cupos");

        txtCupos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCuposKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCuposKeyTyped(evt);
            }
        });

        btnBusquedaAvanzadaMédico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/buscar2.png"))); // NOI18N
        btnBusquedaAvanzadaMédico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaAvanzadaMédicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chkEstado)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblMedico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spnHoraInicio, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnHoraFin, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jdFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtDniMedico, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCupos)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBusquedaAvanzadaMédico, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jdFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spnHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(spnHoraFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(chkEstado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtCupos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtDniMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBusquedaAvanzadaMédico)
                        .addGap(39, 39, 39)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btnModificar.setBackground(new java.awt.Color(153, 255, 255));
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/6673743_health_hospital_injection_medical_medicine_icon.png"))); // NOI18N
        btnModificar.setText("MODIFICAR");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnNuevo.setBackground(new java.awt.Color(153, 255, 255));
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/6673745_health_healthcare_hospital_medic_medical_icon.png"))); // NOI18N
        btnNuevo.setText("NUEVO");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(153, 255, 255));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/6673751_aid_emergency_first_health_healthcare_icon.png"))); // NOI18N
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setBackground(new java.awt.Color(153, 255, 255));
        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/5929159_avatar_doctor_health_hospital_medical_icon.png"))); // NOI18N
        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnDarBaja.setBackground(new java.awt.Color(153, 255, 255));
        btnDarBaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/5929160_avatar_doctor_hospital_man_medical_icon.png"))); // NOI18N
        btnDarBaja.setText("Dar Baja ");
        btnDarBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDarBajaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDarBaja, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                        .addComponent(btnNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(78, 78, 78))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(btnDarBaja, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSalir.setBackground(new java.awt.Color(153, 255, 255));
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/6673740_ambulance_emergency_health_healthcare_hospital_icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 204, 204));

        tblTurnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblTurnos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTurnosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTurnos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        jButton1.setBackground(new java.awt.Color(153, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/1435355619_search.png"))); // NOI18N
        jButton1.setText("BUSQUEDA AVANZADA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalir)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarControles();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        try {
            int respuesta = JOptionPane.showOptionDialog(null, "¿Estas seguro que quieres eliminar este turno medico --->" + txtId.getText() + " ?", "Pregunta",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si");
            if (respuesta == 0) {
                objTurno.eliminarTurnoMedico(Integer.parseInt(txtId.getText()));
                limpiarControles();
                listarTurnoMedico();
                JOptionPane.showMessageDialog(this, "Se elimino el turno medico");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar turno " + e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try {
            if (txtId.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Debe ingresar el ID del turno que desea modificar.");
                return;
            }
            if (txtDniMedico.getText().trim().isEmpty() || lblMedico.getText().equals("No encontrado")) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un DNI válido para el médico.");
                return;
            }
            if (jdFecha.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha válida.");
                return;
            }
            if (!validarHoras()) {
                return;
            }
            if (objTurno.tieneCitasAsociadas(Integer.parseInt(txtId.getText()))) {
                JOptionPane.showMessageDialog(this, "El turno tiene citas asociadas y no se puede modificar.");
                return;
            }
            if (objTurno.verificarCruceTurnos(objTurno.obtenerIdMedicoXDNI(txtDniMedico.getText().trim()),
                    new java.sql.Date(jdFecha.getDate().getTime()),
                    new java.sql.Time(((Date) spnHoraInicio.getValue()).getTime()),
                    new java.sql.Time(((Date) spnHoraFin.getValue()).getTime())
            )) {
                JOptionPane.showMessageDialog(this, "El médico ya tiene un turno en este horario.");
                return;
            }

            int respuesta = JOptionPane.showOptionDialog(null,
                    "¿Está seguro de que quiere modificar este turno? ID: " + txtId.getText(),
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new Object[]{"Sí", "No"},
                    "Sí");

            if (respuesta == JOptionPane.YES_OPTION) {

                objTurno.modificarTurnoMedico(
                        Integer.parseInt(txtId.getText()),
                        new java.sql.Date(jdFecha.getDate().getTime()),
                        new java.sql.Time(((Date) spnHoraInicio.getValue()).getTime()),
                        new java.sql.Time(((Date) spnHoraFin.getValue()).getTime()),
                        chkEstado.isSelected(),
                        Integer.parseInt(txtCupos.getText()),
                        objTurno.obtenerIdMedicoXDNI(txtDniMedico.getText().trim())
                );

                limpiarControles();
                listarTurnoMedico();
                JOptionPane.showMessageDialog(this, "Turno médico modificado correctamente.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar el turno médico: " + e.getMessage());
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        try {
            if (btnNuevo.getText().equalsIgnoreCase("nuevo")) {
                btnNuevo.setText("Guardar");
                limpiarControles();
                txtId.setEditable(false);
                txtId.setText(objTurno.generarCodigo().toString());
                JOptionPane.showMessageDialog(this, "Complete campos para el registro");
                jdFecha.requestFocus();
            } else {
                if (validarCampos()) {
                    btnNuevo.setText("Nuevo");
                    objTurno.registrarTurnoMedico(
                            Integer.parseInt(txtId.getText()),
                            new java.sql.Date(jdFecha.getDate().getTime()),
                            new java.sql.Time(((Date) spnHoraInicio.getValue()).getTime()),
                            new java.sql.Time(((Date) spnHoraFin.getValue()).getTime()),
                            chkEstado.isSelected(),
                            Integer.parseInt(txtCupos.getText()),
                            objTurno.obtenerIdMedicoXDNI(txtDniMedico.getText().trim())
                    );
                    limpiarControles();
                    listarTurnoMedico();
                    JOptionPane.showMessageDialog(this, "Turno médico registrado correctamente.");
                    txtId.setEditable(true);
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al registrar el turno médico: " + e.getMessage());
        }
    }//GEN-LAST:event_btnNuevoActionPerformed
    private boolean validarCampos() throws Exception {
        if (txtId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un ID para el turno.");
            return false;
        }
        if (jdFecha.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha válida.");
            return false;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fechaSeleccionadaStr = sdf.format(jdFecha.getDate());
        String fechaActualStr = sdf.format(Calendar.getInstance().getTime());

        if (fechaSeleccionadaStr.compareTo(fechaActualStr) < 0) {
            JOptionPane.showMessageDialog(this, "La fecha no puede ser anterior o igual a la fecha actual.");
            return false;
        }
        if (!validarHoras()) {
            return false;
        }

        if (txtCupos.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar cupos para el turno");
            return false;
        }
        if (txtDniMedico.getText().trim().isEmpty() || lblMedico.getText().equals("No encontrado")) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un DNI válido para el médico.");
            return false;
        }
        if (objTurno.verificarCruceTurnos(objTurno.obtenerIdMedicoXDNI(txtDniMedico.getText().trim()),
                new java.sql.Date(jdFecha.getDate().getTime()),
                new java.sql.Time(((Date) spnHoraInicio.getValue()).getTime()),
                new java.sql.Time(((Date) spnHoraFin.getValue()).getTime())
        )) {
            JOptionPane.showMessageDialog(this, "El médico ya tiene un turno en este horario.");
            return false;
        }

        return true;
    }
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            if (txtId.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Ingrese un ID para buscar.");
            } else {
                rs = objTurno.buscarTurnoMedico(Integer.parseInt(txtId.getText()));
                if (rs.next()) {
                    jdFecha.setDate(rs.getDate("fecha"));
                    spnHoraInicio.setValue(rs.getTime("hora_inicio"));
                    spnHoraFin.setValue(rs.getTime("hora_fin"));
                    chkEstado.setSelected(rs.getBoolean("estado"));
                    txtCupos.setText(rs.getString("cupos"));
                    txtDniMedico.setText(rs.getString("dni"));
                    lblMedico.setText("Dr. " + rs.getString("nombres") + " " + rs.getString("apellidoPaterno") + " " + rs.getString("apellidoMaterno"));
                    cargarEspecialidades(rs.getInt("idMedico"));
                } else {
                    JOptionPane.showMessageDialog(this, "El ID del turno médico no existe.");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al buscar el turno médico: " + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tblTurnosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTurnosMouseClicked
        // TODO add your handling code here:
        txtId.setText(String.valueOf(tblTurnos.getValueAt(tblTurnos.getSelectedRow(), 0)));
        btnBuscarActionPerformed(null);
    }//GEN-LAST:event_tblTurnosMouseClicked

    private void chkEstadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkEstadoStateChanged
        // TODO add your handling code here:
        if (chkEstado.isSelected()) {
            chkEstado.setText("Activo");
        } else {
            chkEstado.setText("Inactivo");
        }
    }//GEN-LAST:event_chkEstadoStateChanged

    private void btnDarBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDarBajaActionPerformed
        // TODO add your handling code here:
        try {
            if (txtId.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Debe ingresar el código ");
            } else {
                int opcion = JOptionPane.showOptionDialog(null, "¿Está seguro de que desea dar de baja este turno : " + txtId.getText() + "?", "Pregunta",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si");
                if (opcion == 0) {
                    objTurno.darBajaTurno(Integer.parseInt(txtId.getText()));
                    limpiarControles();
                    listarTurnoMedico();
                    JOptionPane.showMessageDialog(this, "Turno médico dado de baja");
                } else {
                    JOptionPane.showMessageDialog(this, "No existe el codigo del Turno ");
                }
            }
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnDarBajaActionPerformed

    private void txtIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyTyped
        int key = evt.getKeyChar();

        boolean numeros = key >= 48 && key <= 57;

        if (!numeros) {
            evt.consume();
        }

        if (txtId.getText().trim().length() == 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIdKeyTyped

    private void spnHoraInicioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnHoraInicioKeyTyped
        char key = evt.getKeyChar();
        boolean permitido = (key >= '0' && key <= '9') || key == ':';
        if (!permitido) {
            evt.consume();
        }

        if (txtId.getText().trim().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_spnHoraInicioKeyTyped

    private void spnHoraFinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnHoraFinKeyTyped

        char key = evt.getKeyChar();
        boolean permitido = (key >= '0' && key <= '9') || key == ':';

        if (!permitido) {
            evt.consume();
        }
    }//GEN-LAST:event_spnHoraFinKeyTyped

    private void spnHoraInicioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnHoraInicioKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_spnHoraInicioKeyReleased

    private void txtDniMedicoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDniMedicoKeyReleased
        // TODO add your handling code here:
        ResultSet rsMedico = null;
        try {
            String dni = txtDniMedico.getText().trim();
            if (!dni.isEmpty()) {
                rsMedico = objTurno.obtenerIdMedicoDNI(String.valueOf(dni));
                if (rsMedico.next()) {

                    lblMedico.setText("Dr." + rsMedico.getString("nombres") + " "
                            + rsMedico.getString("apellidoPaterno") + " "
                            + rsMedico.getString("apellidoMaterno"));
                    cargarEspecialidades(rsMedico.getInt("idMedico"));
                } else {
                    lblMedico.setText("No encontrado");
                    limpiarListaEspecialidades();
                }
            } else {
                lblMedico.setText("");
                limpiarListaEspecialidades();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al buscar el médico: " + e.getMessage());
        }
    }//GEN-LAST:event_txtDniMedicoKeyReleased

    private void txtCuposKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuposKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCuposKeyReleased

    private void txtCuposKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuposKeyTyped
        char key = evt.getKeyChar();

        if (!Character.isDigit(key)) {
            evt.consume();
        }

        if (txtCupos.getText().length() >= 2) {
            evt.consume();
        }

    }//GEN-LAST:event_txtCuposKeyTyped

    private void btnBusquedaAvanzadaMédicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaAvanzadaMédicoActionPerformed
        // TODO add your handling code here:
        try {
            jdBusqAvanzMedicosTurno obj = new jdBusqAvanzMedicosTurno((Frame) SwingUtilities.getWindowAncestor(this), true);
            obj.setLocationRelativeTo(this);
            obj.setVisible(true);
            String dniSeleccionado = obj.getDniMedico();
            txtDniMedico.setText(dniSeleccionado);
            if (!dniSeleccionado.isEmpty()) {
                txtDniMedico.setText(dniSeleccionado);
                txtDniMedicoKeyReleased(null);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnBusquedaAvanzadaMédicoActionPerformed

    private void limpiarControles() {
        txtId.setText("");
        jdFecha.setDate(null);

        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);

        Date initTime = calendar.getTime();
        spnHoraInicio.setValue(initTime);
        spnHoraFin.setValue(initTime);
        txtDniMedico.setText("");
        txtCupos.setText("");
        chkEstado.setSelected(false);
        jdFecha.requestFocus();
        lblMedico.setText("");
        limpiarListaEspecialidades();
    }

    private void limpiarListaEspecialidades() {
        DefaultListModel<String> modelo = new DefaultListModel<>();
        listEspecialidades.setModel(modelo);
    }

    private void listarTurnoMedico() {
        ResultSet rsTurno = null;
        String estado = "";
        DefaultTableModel modelo = new DefaultTableModel();

        // Definir columnas de la tabla
        modelo.addColumn("ID");
        modelo.addColumn("Fecha");
        modelo.addColumn("Hora Inicio");
        modelo.addColumn("Hora Fin");
        modelo.addColumn("Estado");
        modelo.addColumn("Cupos");
        modelo.addColumn("Médico");
        try {
            rsTurno = objTurno.listarTurnosMedicos();

            while (rsTurno.next()) {
                estado = rsTurno.getBoolean("estado") ? "Activo" : "Inactivo";
                modelo.addRow(new Object[]{
                    rsTurno.getInt("idTurno"),
                    rsTurno.getDate("fecha"),
                    rsTurno.getTime("hora_inicio"),
                    rsTurno.getTime("hora_fin"),
                    estado,
                    rsTurno.getString("cupos"),
                    rsTurno.getString("nombres") + " " + rsTurno.getString("apellidoPaterno")
                });
            }
            tblTurnos.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al listar los turnos médicos: " + e.getMessage());
        }
    }

    private void cargarMedicos() {
        try {
            ResultSet rs = objTurno.medicosDisponibles();
            while (rs.next()) {
                System.out.println("Dr. " + rs.getString("nombres") + " " + rs.getString("apellidoPaterno"));

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los médicos disponibles: " + e.getMessage());
        }
    }

    private void cargarEspecialidades(int idMedico) {
        DefaultListModel<String> modelo = new DefaultListModel<>();
        listEspecialidades.setModel(modelo);

        try {
            rs = objMedico.listarEspecialidadesxMédico(idMedico);
            while (rs.next()) {
                modelo.addElement(rs.getString("nombre"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al listar las especialidades: " + e.getMessage());
        }
    }

    private void formatoParaLosSpinners() {
        SpinnerDateModel modelInicio = new SpinnerDateModel();
        SpinnerDateModel modelFin = new SpinnerDateModel();
        spnHoraInicio.setModel(modelInicio);
        spnHoraFin.setModel(modelFin);

        JSpinner.DateEditor editorInicio = new JSpinner.DateEditor(spnHoraInicio, "HH:mm");
        JSpinner.DateEditor editorFin = new JSpinner.DateEditor(spnHoraFin, "HH:mm");

        spnHoraInicio.setEditor(editorInicio);
        spnHoraFin.setEditor(editorFin);
        ChangeListener timeChangeListener = new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                actualizarCupos();
            }
        };

        spnHoraInicio.addChangeListener(timeChangeListener);
        spnHoraFin.addChangeListener(timeChangeListener);

        try {
            Calendar calendar = Calendar.getInstance();
            calendar.set(Calendar.HOUR_OF_DAY, 0);
            calendar.set(Calendar.MINUTE, 0);

            Date initTime = calendar.getTime();
            spnHoraInicio.setValue(initTime);
            spnHoraFin.setValue(initTime);
        } catch (Exception ex) {
        }

        spnHoraInicio.addChangeListener(e -> {
            try {
                Date value = (Date) spnHoraInicio.getValue();
                Calendar cal = Calendar.getInstance();
                cal.setTime(value);
                cal.set(Calendar.SECOND, 0);
                cal.set(Calendar.MILLISECOND, 0);
                spnHoraInicio.setValue(cal.getTime());
            } catch (Exception ex) {
            }
        });

        spnHoraFin.addChangeListener(e -> {
            try {
                Date value = (Date) spnHoraFin.getValue();
                Calendar cal = Calendar.getInstance();
                cal.setTime(value);
                cal.set(Calendar.SECOND, 0);
                cal.set(Calendar.MILLISECOND, 0);
                spnHoraFin.setValue(cal.getTime());
            } catch (Exception ex) {
            }

        });
    }

    private boolean validarHoras() {
        
        try {
            Date horaInicio = (Date) spnHoraInicio.getValue();
            Date horaFin = (Date) spnHoraFin.getValue();

            Calendar calInicio = Calendar.getInstance();
            Calendar calFin = Calendar.getInstance();
            Calendar calActual = Calendar.getInstance();

            calInicio.setTime(horaInicio);
            calFin.setTime(horaFin);

            calInicio.set(Calendar.YEAR, 1970);
            calInicio.set(Calendar.MONTH, Calendar.JANUARY);
            calInicio.set(Calendar.DAY_OF_MONTH, 1);
            calFin.set(Calendar.YEAR, 1970);
            calFin.set(Calendar.MONTH, Calendar.JANUARY);
            calFin.set(Calendar.DAY_OF_MONTH, 1);
            calActual.set(Calendar.YEAR, 1970);
            calActual.set(Calendar.MONTH, Calendar.JANUARY);
            calActual.set(Calendar.DAY_OF_MONTH, 1);

            if (calInicio.after(calFin)) {
                JOptionPane.showMessageDialog(this, "La hora de inicio no puede ser posterior a la hora de fin.");
                return false;
            }

            if (calInicio.before(calActual)) {
                JOptionPane.showMessageDialog(this, "La hora de inicio no puede ser anterior a la hora actual.");
                return false;
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Formato de hora inválido.");
            return false;
        }
    }

    private void actualizarCupos() {
        try {
            Date horaInicio = (Date) spnHoraInicio.getValue();
            Date horaFin = (Date) spnHoraFin.getValue();

            LocalTime inicio = horaInicio.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalTime();

            LocalTime fin = horaFin.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalTime();

            long minutosDiferencia = ChronoUnit.MINUTES.between(inicio, fin);
            int numeroCupos = (int) (minutosDiferencia / 30);
            if (minutosDiferencia < 0) {
                numeroCupos = 0;
            }
            txtCupos.setText(String.valueOf(numeroCupos));

        } catch (Exception ex) {
            System.err.println("Error al calcular cupos: " + ex.getMessage());
            txtCupos.setText("0");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBusquedaAvanzadaMédico;
    private javax.swing.JButton btnDarBaja;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JCheckBox chkEstado;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdFecha;
    private javax.swing.JLabel lblMedico;
    private javax.swing.JList<String> listEspecialidades;
    private javax.swing.JSpinner spnHoraFin;
    private javax.swing.JSpinner spnHoraInicio;
    private javax.swing.JTable tblTurnos;
    private javax.swing.JTextField txtCupos;
    private javax.swing.JTextField txtDniMedico;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables
}
