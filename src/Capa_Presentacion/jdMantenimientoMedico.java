/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Capa_Presentacion;

import Capa_Negocio.clsEspecialidad;
import Capa_Negocio.clsMedico;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import java.util.Date;

/**
 *
 * @author MendozaGastulo_Tadeo
 */
public class jdMantenimientoMedico extends javax.swing.JDialog {

    clsMedico objMed = new clsMedico();
    clsEspecialidad objEspecialidad = new clsEspecialidad();

    public jdMantenimientoMedico(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        listEspecialidades.setModel(new DefaultListModel<>());
        listEspecialidadesSeleccionadas.setModel(new DefaultListModel<>());
        listarMedicos();
        cargarListaEspecialidades();
        listEspecialidades.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLimpiar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtNombres = new javax.swing.JTextField();
        chkVigencia = new javax.swing.JCheckBox();
        btnBuscar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jdFechaNac = new com.toedter.calendar.JDateChooser();
        txtApePa = new javax.swing.JTextField();
        txtApeMa = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listEspecialidades = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        btnNuevaEspecialidad = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listEspecialidadesSeleccionadas = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnDarBaja = new javax.swing.JButton();
        btnLimpiar1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMedicos = new javax.swing.JTable();
        btnSalir = new javax.swing.JButton();

        btnLimpiar.setBackground(new java.awt.Color(153, 255, 255));
        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/5929159_avatar_doctor_health_hospital_medical_icon.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MANTENIMIENTO MÉDICO");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setText("Nombre:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setText("Id:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setText("Vigencia");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel4.setText("Apellido Paterno");

        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdKeyTyped(evt);
            }
        });

        txtNombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombresKeyTyped(evt);
            }
        });

        chkVigencia.setText("No vigente");
        chkVigencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkVigenciaStateChanged(evt);
            }
        });
        chkVigencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkVigenciaActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/1622836_checkmark_done_explore_find_magnifier_icon.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel5.setText("Apellido Materno");

        jdFechaNac.setDateFormatString("yyyy/MM/dd");

        txtApePa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApePaKeyTyped(evt);
            }
        });

        txtApeMa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApeMaKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel7.setText("Nacimiento:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel8.setText("DNI:");

        txtDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDNIKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/8960618_reports_checkup_clipboard_hospital_doctor_icon.png"))); // NOI18N
        jLabel6.setText("Especialidades");

        listEspecialidades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listEspecialidadesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listEspecialidades);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel9.setText("Correo");

        txtCorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCorreoKeyTyped(evt);
            }
        });

        btnNuevaEspecialidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/8725908_file_edit_alt_icon (2).png"))); // NOI18N
        btnNuevaEspecialidad.setText("NUEVO");
        btnNuevaEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaEspecialidadActionPerformed(evt);
            }
        });

        listEspecialidadesSeleccionadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listEspecialidadesSeleccionadasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listEspecialidadesSeleccionadas);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/8960624_stethoscopes_stethoscope_doctor_health_healthcare_icon.png"))); // NOI18N
        jLabel10.setText("Especialidades del médico");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)
                                .addGap(8, 8, 8))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jdFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(105, 105, 105)
                                .addComponent(btnNuevaEspecialidad))
                            .addComponent(chkVigencia)
                            .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtApeMa, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtApePa, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(64, 64, 64)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6)
                                        .addGap(26, 26, 26)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(49, 49, 49)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtApePa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtApeMa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jdFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevaEspecialidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(chkVigencia))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btnNuevo.setBackground(new java.awt.Color(153, 255, 255));
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/6673745_health_healthcare_hospital_medic_medical_icon.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(153, 255, 255));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/6673751_aid_emergency_first_health_healthcare_icon.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setBackground(new java.awt.Color(153, 255, 255));
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/6673743_health_hospital_injection_medical_medicine_icon.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnDarBaja.setBackground(new java.awt.Color(153, 255, 255));
        btnDarBaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/5929160_avatar_doctor_hospital_man_medical_icon.png"))); // NOI18N
        btnDarBaja.setText("Dar Baja");
        btnDarBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDarBajaActionPerformed(evt);
            }
        });

        btnLimpiar1.setBackground(new java.awt.Color(153, 255, 255));
        btnLimpiar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/5929159_avatar_doctor_health_hospital_medical_icon.png"))); // NOI18N
        btnLimpiar1.setText("LIMPIAR");
        btnLimpiar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDarBaja, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpiar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btnNuevo)
                .addGap(18, 18, 18)
                .addComponent(btnModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(btnDarBaja)
                .addGap(28, 28, 28)
                .addComponent(btnLimpiar1)
                .addGap(31, 31, 31)
                .addComponent(btnEliminar)
                .addGap(27, 27, 27))
        );

        jPanel3.setBackground(new java.awt.Color(0, 204, 204));

        tblMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMedicosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMedicos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnSalir.setBackground(new java.awt.Color(153, 255, 255));
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/6673740_ambulance_emergency_health_healthcare_hospital_icon.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(34, 34, 34)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(btnSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(btnSalir))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        if (txtId.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese un Id");
        } else {
            try {
                int respuesta = JOptionPane.showOptionDialog(null, "¿Estas seguro que quieres eliminar de manera permanente este medico :" + txtNombres.getText() + " ?", "Pregunta",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si");
                if (respuesta == 0) {
                    objMed.eliminarMedico(Integer.valueOf(txtId.getText()));
                    JOptionPane.showMessageDialog(this, "Medico con Id: " + txtId.getText() + " eliminado.");
                    listarMedicos();
                    limpiarControles();
                }
            } catch (Exception e) {

                JOptionPane.showMessageDialog(this, "Error al eliminar a medico " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnDarBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDarBajaActionPerformed
        // TODO add your handling code here:
        if (txtId.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese un Id");
        } else {
            try {
                int respuesta = JOptionPane.showOptionDialog(null, "¿Estas seguro que quieres dar de baja  este medico: " + txtNombres.getText() + " ?", "Pregunta",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si");
                if (respuesta == 0) {
                    objMed.darBaja(Integer.valueOf(txtId.getText()));
                    JOptionPane.showMessageDialog(this, "Medico con Id: " + txtId.getText() + " dado de baja");
                    listarMedicos();
                    limpiarControles();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al dar de baja a medico" + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnDarBajaActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarControles();
        listarMedicos();
        cargarListaEspecialidades();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        try {
            if (btnNuevo.getText().equals("Nuevo")) {
                btnNuevo.setText("Guardar");
                JOptionPane.showMessageDialog(this, "Complete los campos para registrar al médico.");
                limpiarControles();
                txtId.setEditable(false);
                cargarListaEspecialidades();
                txtId.setText(objMed.generarIdDoctor().toString());
                txtDNI.requestFocus();
            } else {
                if (validarCamposPaciente()) {
                    btnNuevo.setText("Nuevo");
                    registrarMedico();
                    limpiarControles();
                    listarMedicos();
                    txtId.setEditable(true);
                    JOptionPane.showMessageDialog(this, "Médico registrado con éxito");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al registrar el médico: " + e.getMessage());
        }
    }//GEN-LAST:event_btnNuevoActionPerformed
    private void registrarMedico() throws Exception {
        java.sql.Date fechaNacimientoSQL = new java.sql.Date(jdFechaNac.getDate().getTime());
        objMed.registrarMedico(
                Integer.valueOf(txtId.getText()),
                txtDNI.getText(),
                txtNombres.getText(),
                txtApePa.getText(),
                txtApeMa.getText(),
                fechaNacimientoSQL,
                txtCorreo.getText(),
                chkVigencia.isSelected()
        );

        DefaultListModel<String> modelSeleccionadas = (DefaultListModel<String>) listEspecialidadesSeleccionadas.getModel();
        List<Integer> especialidadesSeleccionadas = new ArrayList<>();

        for (int i = 0; i < modelSeleccionadas.size(); i++) {
            String especialidadNombre = modelSeleccionadas.getElementAt(i).trim();
            int idEspecialidad = objEspecialidad.obtenerIdsEspecialidadesSeleccionadas(especialidadNombre);
            if (idEspecialidad == 0) {
                throw new Exception("La especialidad '" + especialidadNombre + "' no existe en la base de datos.");
            }
            especialidadesSeleccionadas.add(idEspecialidad);
        }
        objMed.registrarEspecialidadesMedico(Integer.parseInt(txtId.getText()), especialidadesSeleccionadas);
    }

    private boolean validarCamposPaciente() {
        if (txtDNI.getText().isEmpty() || txtDNI.getText().length() != 8) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un DNI válido (8 dígitos).");
            return false;
        }
        if (txtNombres.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe completar el nombre del médico");
            return false;
        }
        if (txtApePa.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe completar el apellido paterno del médico");
            return false;
        }
        if (txtApeMa.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe completar el apellido materno del médico");
            return false;
        }
        if (jdFechaNac.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha de nacimiento.");
            return false;
        }
        Date fechaActual = new Date();

        Date fechaNacimiento = jdFechaNac.getDate();

        if (fechaNacimiento != null && fechaNacimiento.after(fechaActual)) {
            JOptionPane.showMessageDialog(this, "La fecha de nacimiento no puede ser posterior a la fecha actual.");
            return false;
        }
        if (txtCorreo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe completar el correo del medico");
            return false;
        }
        // Expresión regular para validar el correo electrónico
        String regexCorreo = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$";
        if (!txtCorreo.getText().matches(regexCorreo)) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un correo electrónico válido.");
            return false;
        }
        return true;
    }

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try {
            if (txtId.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un ID.");
                return;
            }
            int respuesta = JOptionPane.showOptionDialog(
                    null,
                    "¿Está seguro de que quiere modificar este médico: " + txtNombres.getText() + "?",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new Object[]{"Sí", "No"},
                    "Sí"
            );

            if (respuesta == JOptionPane.YES_OPTION) {
                java.sql.Date fechaNacimientoSQL = new java.sql.Date(jdFechaNac.getDate().getTime());

                objMed.modificarMedico(
                        Integer.valueOf(txtId.getText()),
                        txtDNI.getText(),
                        txtNombres.getText(),
                        txtApePa.getText(),
                        txtApeMa.getText(),
                        fechaNacimientoSQL,
                        txtCorreo.getText(),
                        chkVigencia.isSelected()
                );

                List<Integer> especialidadesSeleccionadas = new ArrayList<>();
                DefaultListModel<String> modelSeleccionadas = (DefaultListModel<String>) listEspecialidadesSeleccionadas.getModel();

                for (int i = 0; i < modelSeleccionadas.size(); i++) {
                    String especialidadNombre = modelSeleccionadas.getElementAt(i).trim();
                    int idEspecialidad = objEspecialidad.obtenerIdsEspecialidadesSeleccionadas(especialidadNombre);
                    if (idEspecialidad == 0) {
                        throw new Exception("La especialidad '" + especialidadNombre + "' no existe en la base de datos.");
                    }
                    especialidadesSeleccionadas.add(idEspecialidad);
                }

                objMed.eliminarEspecialidadesMedico(Integer.parseInt(txtId.getText()));
                objMed.registrarEspecialidadesMedico(Integer.parseInt(txtId.getText()), especialidadesSeleccionadas);

                JOptionPane.showMessageDialog(this, "Médico con Id: " + txtId.getText() + " modificado.");
                listarMedicos();
                limpiarControles();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar médico: " + e.getMessage());
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:

        try {
            if (txtId.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Ingrese un id para buscar");
            } else {
                ResultSet rs = objMed.buscarMedico(Integer.valueOf(txtId.getText()));
                if (rs.next()) {
                    txtDNI.setText(rs.getString("dni"));
                    txtNombres.setText(rs.getString("nombres"));
                    txtApePa.setText(rs.getString("apellidoPaterno"));
                    txtApeMa.setText(rs.getString("apellidoMaterno"));
                    jdFechaNac.setDate(rs.getDate("fecha_nacimiento"));
                    txtCorreo.setText(rs.getString("correo"));
                    chkVigencia.setSelected(rs.getBoolean("vigencia"));
                    int idMedico = rs.getInt("idMedico");
                    cargarEspecialidadesMedico(idMedico);
                } else {
                    JOptionPane.showMessageDialog(this, "El Código del médico no existe");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al encontrar medico" + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tblMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMedicosMouseClicked
        // TODO add your handling code here:
        txtId.setText(String.valueOf(tblMedicos.getValueAt(tblMedicos.getSelectedRow(), 0)));
        btnBuscarActionPerformed(null);
    }//GEN-LAST:event_tblMedicosMouseClicked

    private void chkVigenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkVigenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkVigenciaActionPerformed

    private void chkVigenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkVigenciaStateChanged
        // TODO add your handling code here:
        if (chkVigencia.isSelected()) {
            chkVigencia.setText("Vigente");
        } else {
            chkVigencia.setText("No vigente");
        }
    }//GEN-LAST:event_chkVigenciaStateChanged

    private void btnNuevaEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaEspecialidadActionPerformed
        // TODO add your handling code here:
        jdMantenimientoEspecialidad obj;
        try {
            obj = new jdMantenimientoEspecialidad(null, true);
            obj.setLocationRelativeTo(this);
            obj.setVisible(true);
            cargarListaEspecialidades();
        } catch (Exception ex) {
            Logger.getLogger(jdMantenimientoPaciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNuevaEspecialidadActionPerformed

    private void listEspecialidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listEspecialidadesMouseClicked
        String especialidad = listEspecialidades.getSelectedValue();

        if (especialidad != null) {
            DefaultListModel<String> modelDisponibles = (DefaultListModel<String>) listEspecialidades.getModel();
            DefaultListModel<String> modelSeleccionadas = (DefaultListModel<String>) listEspecialidadesSeleccionadas.getModel();

            if (modelSeleccionadas.contains(especialidad)) {
                JOptionPane.showMessageDialog(this, "El médico ya tiene registrada esta especialidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                modelDisponibles.removeElement(especialidad);
                modelSeleccionadas.addElement(especialidad);
            }
        }
    }//GEN-LAST:event_listEspecialidadesMouseClicked

    private void btnLimpiar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiar1ActionPerformed
        // TODO add your handling code here:
        limpiarControles();
        cargarListaEspecialidades();
    }//GEN-LAST:event_btnLimpiar1ActionPerformed

    private void listEspecialidadesSeleccionadasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listEspecialidadesSeleccionadasMouseClicked
        String especialidadSeleccionada = listEspecialidadesSeleccionadas.getSelectedValue();

        if (especialidadSeleccionada != null) {
            int respuesta = JOptionPane.showConfirmDialog(
                    this,
                    "¿Desea quitar esta especialidad?",
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE
            );

            if (respuesta == JOptionPane.YES_OPTION) {
                DefaultListModel<String> modelDisponibles = (DefaultListModel<String>) listEspecialidades.getModel();
                DefaultListModel<String> modelSeleccionadas = (DefaultListModel<String>) listEspecialidadesSeleccionadas.getModel();

                modelSeleccionadas.removeElement(especialidadSeleccionada);
                modelDisponibles.addElement(especialidadSeleccionada);
            }
        }

    }//GEN-LAST:event_listEspecialidadesSeleccionadasMouseClicked

    private void txtIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyTyped
        int key = evt.getKeyChar();

        boolean numeros = key >= 48 && key <= 57;

        if (!numeros) {
            evt.consume();
        }

        if (txtId.getText().trim().length() == 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIdKeyTyped

    private void txtDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDNIKeyTyped
        // Obtén el carácter presionado
        char key = evt.getKeyChar();

        if (!Character.isDigit(key)) {
            evt.consume();
        }
        if (txtDNI.getText().length() >= 8) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDNIKeyTyped

    private void txtNombresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombresKeyTyped
        int key = evt.getKeyChar();

        boolean mayusculas = key >= 65 && key <= 90;
        boolean minusculas = key >= 97 && key <= 122;
        boolean espacio = key == 32;

        if (!(minusculas || mayusculas || espacio)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombresKeyTyped

    private void txtApePaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApePaKeyTyped
        int key = evt.getKeyChar();

        boolean mayusculas = key >= 65 && key <= 90;
        boolean minusculas = key >= 97 && key <= 122;
        boolean espacio = key == 32;

        if (!(minusculas || mayusculas || espacio)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtApePaKeyTyped

    private void txtApeMaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeMaKeyTyped
        int key = evt.getKeyChar();

        boolean mayusculas = key >= 65 && key <= 90;
        boolean minusculas = key >= 97 && key <= 122;
        boolean espacio = key == 32;

        if (!(minusculas || mayusculas || espacio)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtApeMaKeyTyped

    private void txtCorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCorreoKeyTyped
        char key = evt.getKeyChar();

        boolean mayusculas = key >= 'A' && key <= 'Z';
        boolean minusculas = key >= 'a' && key <= 'z';
        boolean numeros = key >= '0' && key <= '9';
        boolean especiales = key == '@' || key == '.' || key == '-' || key == '_';

        if (!(mayusculas || minusculas || numeros || especiales)) {
            evt.consume();
        }

        if (key == ' ') {
            evt.consume();
        }
    }//GEN-LAST:event_txtCorreoKeyTyped

    private void listarMedicos() {
        ResultSet rs = null;
        String vigencia = "";
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("DNI");
        modelo.addColumn("Nombre");
        modelo.addColumn("Ape. Paterno");
        modelo.addColumn("Ape .Materno");
        modelo.addColumn("Fecha de nacimiento");
        modelo.addColumn("correo");
        modelo.addColumn("vigencia");

        try {
            rs = objMed.listarMedicos();
            Object datos[][] = new Object[1][8];
            while (rs.next()) {
                if (rs.getString("vigencia").equals("t")) {
                    vigencia = "Vigente";
                } else {
                    vigencia = "No vigente";
                }
                datos[0][0] = rs.getInt("idMedico");
                datos[0][1] = rs.getString("dni");
                datos[0][2] = rs.getString("nombres");
                datos[0][3] = rs.getString("apellidoPaterno");
                datos[0][4] = rs.getString("apellidoMaterno");
                datos[0][5] = rs.getDate("fecha_nacimiento");
                datos[0][6] = rs.getString("correo");
                datos[0][7] = vigencia;
                modelo.addRow(datos[0]);
            }
            tblMedicos.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al listar los medicos" + e.getMessage());
        }
    }

    private void limpiarControles() {
        txtId.setText("");
        txtDNI.setText("");
        txtNombres.setText("");
        txtApeMa.setText("");
        txtApePa.setText("");
        chkVigencia.setSelected(false);
        txtDNI.requestFocus();
        jdFechaNac.setCalendar(null);
        txtCorreo.setText("");
        ((DefaultListModel<String>) listEspecialidadesSeleccionadas.getModel()).clear();
        cargarListaEspecialidades();
    }

    private void cargarListaEspecialidades() {
        ResultSet rs = null;
        DefaultListModel<String> model = new DefaultListModel<>();
        try {
            rs = objEspecialidad.listarEspecialidadesMedico();
            while (rs.next()) {
                String especialidad = rs.getString("nombre");
                model.addElement(especialidad);
            }
            listEspecialidades.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar especialidades: " + e.getMessage());
        }
    }

    private void cargarEspecialidadesMedico(int idMedico) {
        DefaultListModel<String> modelo = new DefaultListModel<>();
        listEspecialidadesSeleccionadas.setModel(modelo);
        try {
            ResultSet rs = objMed.listarEspecialidadesxMédico(idMedico);
            while (rs.next()) {
                String especialidad = rs.getString("nombre");
                modelo.addElement(especialidad);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar especialidades del médico: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnDarBaja;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnLimpiar1;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevaEspecialidad;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JCheckBox chkVigencia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.calendar.JDateChooser jdFechaNac;
    private javax.swing.JList<String> listEspecialidades;
    private javax.swing.JList<String> listEspecialidadesSeleccionadas;
    private javax.swing.JTable tblMedicos;
    private javax.swing.JTextField txtApeMa;
    private javax.swing.JTextField txtApePa;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombres;
    // End of variables declaration//GEN-END:variables
}
